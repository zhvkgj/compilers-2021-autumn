-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

var getBinopTree = fun (l, op, r) {Binop (op, l, r)};

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr({
                           [Left, {[s("!!"), getBinopTree]}],
                           [Left, {[s("&&"), getBinopTree]}],
                           [Nona, {
                           [s("<"),  getBinopTree],
                           [s("<="), getBinopTree],
                           [s("=="), getBinopTree],
                           [s("!="), getBinopTree],
                           [s(">"),  getBinopTree],
                           [s(">="), getBinopTree]
                           }],
                           [Left, {
                           [s("+"), getBinopTree],
                           [s("-"), getBinopTree]
                           }],
                           [Left, {
                           [s("*"), getBinopTree],
                           [s("/"), getBinopTree],
                           [s("%"), getBinopTree]
                           }]
                           }, primary);

var stmt = memo $ eta syntax (x=lident -s[":="] e=exp               {Assn  (x, e)}  |
                              -kRead x=inbr[s("("), lident, s(")")] {Read  (x)}     |
                              -kWrite e=inbr[s("("), exp, s(")")]   {Write (e)}     |
                              -kSkip                                {Skip}
);

-- Build parse tree based on list of statements
fun buildParseTree (ls) {
  case ls of
                  -- todo zhvkgj: replace on building AVL Tree to improve performance
    st1:st2:tl -> foldl (fun (seq, el) {Seq (seq, el)}, Seq (st1, st2), tl)
  | st1:{}     -> st1
  | _          -> {}
  esac
}

var seqStmt = memo $ eta syntax (ls=listBy[stmt, s(";")] {buildParseTree (ls)});

-- Public top-level parser
public parse = seqStmt;